// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: building.proto

#include "building.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
PROTOBUF_CONSTEXPR Building::Building(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.building_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.street_)*/nullptr
  , /*decltype(_impl_.building_num_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuildingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildingDefaultTypeInternal() {}
  union {
    Building _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildingDefaultTypeInternal _Building_default_instance_;
static ::_pb::Metadata file_level_metadata_building_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_building_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_building_2eproto = nullptr;
const ::uint32_t TableStruct_building_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Building, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Building, _impl_.building_name_),
    PROTOBUF_FIELD_OFFSET(::Building, _impl_.building_num_),
    PROTOBUF_FIELD_OFFSET(::Building, _impl_.street_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::Building)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Building_default_instance_._instance,
};
const char descriptor_table_protodef_building_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016building.proto\032\014street.proto\"P\n\010Buildi"
    "ng\022\025\n\rbuilding_name\030\001 \001(\t\022\024\n\014building_nu"
    "m\030\002 \001(\004\022\027\n\006street\030\003 \001(\0132\007.Streetb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_building_2eproto_deps[1] =
    {
        &::descriptor_table_street_2eproto,
};
static ::absl::once_flag descriptor_table_building_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_building_2eproto = {
    false,
    false,
    120,
    descriptor_table_protodef_building_2eproto,
    "building.proto",
    &descriptor_table_building_2eproto_once,
    descriptor_table_building_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_building_2eproto::offsets,
    file_level_metadata_building_2eproto,
    file_level_enum_descriptors_building_2eproto,
    file_level_service_descriptors_building_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_building_2eproto_getter() {
  return &descriptor_table_building_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_building_2eproto(&descriptor_table_building_2eproto);
// ===================================================================

class Building::_Internal {
 public:
  static const ::Street& street(const Building* msg);
};

const ::Street&
Building::_Internal::street(const Building* msg) {
  return *msg->_impl_.street_;
}
void Building::clear_street() {
  if (GetArenaForAllocation() == nullptr && _impl_.street_ != nullptr) {
    delete _impl_.street_;
  }
  _impl_.street_ = nullptr;
}
Building::Building(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Building)
}
Building::Building(const Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Building* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.building_name_) {}

    , decltype(_impl_.street_){nullptr}
    , decltype(_impl_.building_num_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.building_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.building_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_building_name().empty()) {
    _this->_impl_.building_name_.Set(from._internal_building_name(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_street()) {
    _this->_impl_.street_ = new ::Street(*from._impl_.street_);
  }
  _this->_impl_.building_num_ = from._impl_.building_num_;
  // @@protoc_insertion_point(copy_constructor:Building)
}

inline void Building::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.building_name_) {}

    , decltype(_impl_.street_){nullptr}
    , decltype(_impl_.building_num_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.building_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.building_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Building::~Building() {
  // @@protoc_insertion_point(destructor:Building)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Building::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.building_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.street_;
}

void Building::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Building::Clear() {
// @@protoc_insertion_point(message_clear_start:Building)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.building_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.street_ != nullptr) {
    delete _impl_.street_;
  }
  _impl_.street_ = nullptr;
  _impl_.building_num_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Building::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string building_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_building_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Building.building_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 building_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.building_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Street street = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_street(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Building::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Building)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string building_name = 1;
  if (!this->_internal_building_name().empty()) {
    const std::string& _s = this->_internal_building_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Building.building_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 building_num = 2;
  if (this->_internal_building_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_building_num(), target);
  }

  // .Street street = 3;
  if (this->_internal_has_street()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::street(this),
        _Internal::street(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Building)
  return target;
}

::size_t Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Building)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string building_name = 1;
  if (!this->_internal_building_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_building_name());
  }

  // .Street street = 3;
  if (this->_internal_has_street()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.street_);
  }

  // uint64 building_num = 2;
  if (this->_internal_building_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_building_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Building::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Building::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Building::GetClassData() const { return &_class_data_; }


void Building::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Building*>(&to_msg);
  auto& from = static_cast<const Building&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Building)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_building_name().empty()) {
    _this->_internal_set_building_name(from._internal_building_name());
  }
  if (from._internal_has_street()) {
    _this->_internal_mutable_street()->::Street::MergeFrom(
        from._internal_street());
  }
  if (from._internal_building_num() != 0) {
    _this->_internal_set_building_num(from._internal_building_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Building::CopyFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  return true;
}

void Building::InternalSwap(Building* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.building_name_, lhs_arena,
                                       &other->_impl_.building_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Building, _impl_.building_num_)
      + sizeof(Building::_impl_.building_num_)
      - PROTOBUF_FIELD_OFFSET(Building, _impl_.street_)>(
          reinterpret_cast<char*>(&_impl_.street_),
          reinterpret_cast<char*>(&other->_impl_.street_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Building::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_building_2eproto_getter, &descriptor_table_building_2eproto_once,
      file_level_metadata_building_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Building*
Arena::CreateMaybeMessage< ::Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Building >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
