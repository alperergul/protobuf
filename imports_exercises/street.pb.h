// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: street.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_street_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_street_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "city.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_street_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_street_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_street_2eproto;
class Street;
struct StreetDefaultTypeInternal;
extern StreetDefaultTypeInternal _Street_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::Street* Arena::CreateMaybeMessage<::Street>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class Street final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Street) */ {
 public:
  inline Street() : Street(nullptr) {}
  ~Street() override;
  explicit PROTOBUF_CONSTEXPR Street(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Street(const Street& from);
  Street(Street&& from) noexcept
    : Street() {
    *this = ::std::move(from);
  }

  inline Street& operator=(const Street& from) {
    CopyFrom(from);
    return *this;
  }
  inline Street& operator=(Street&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Street& default_instance() {
    return *internal_default_instance();
  }
  static inline const Street* internal_default_instance() {
    return reinterpret_cast<const Street*>(
               &_Street_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Street& a, Street& b) {
    a.Swap(&b);
  }
  inline void Swap(Street* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Street* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Street* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Street>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Street& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Street& from) {
    Street::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Street* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Street";
  }
  protected:
  explicit Street(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetNameFieldNumber = 1,
    kCityFieldNumber = 2,
  };
  // string street_name = 1;
  void clear_street_name() ;
  const std::string& street_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_street_name();
  PROTOBUF_NODISCARD std::string* release_street_name();
  void set_allocated_street_name(std::string* ptr);

  private:
  const std::string& _internal_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_street_name(
      const std::string& value);
  std::string* _internal_mutable_street_name();

  public:
  // .City city = 2;
  bool has_city() const;
  private:
  bool _internal_has_city() const;

  public:
  void clear_city() ;
  const ::City& city() const;
  PROTOBUF_NODISCARD ::City* release_city();
  ::City* mutable_city();
  void set_allocated_city(::City* city);
  private:
  const ::City& _internal_city() const;
  ::City* _internal_mutable_city();
  public:
  void unsafe_arena_set_allocated_city(
      ::City* city);
  ::City* unsafe_arena_release_city();
  // @@protoc_insertion_point(class_scope:Street)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_name_;
    ::City* city_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_street_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Street

// string street_name = 1;
inline void Street::clear_street_name() {
  _impl_.street_name_.ClearToEmpty();
}
inline const std::string& Street::street_name() const {
  // @@protoc_insertion_point(field_get:Street.street_name)
  return _internal_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Street::set_street_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Street.street_name)
}
inline std::string* Street::mutable_street_name() {
  std::string* _s = _internal_mutable_street_name();
  // @@protoc_insertion_point(field_mutable:Street.street_name)
  return _s;
}
inline const std::string& Street::_internal_street_name() const {
  return _impl_.street_name_.Get();
}
inline void Street::_internal_set_street_name(const std::string& value) {
  ;


  _impl_.street_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Street::_internal_mutable_street_name() {
  ;
  return _impl_.street_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Street::release_street_name() {
  // @@protoc_insertion_point(field_release:Street.street_name)
  return _impl_.street_name_.Release();
}
inline void Street::set_allocated_street_name(std::string* value) {
  _impl_.street_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.street_name_.IsDefault()) {
          _impl_.street_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Street.street_name)
}

// .City city = 2;
inline bool Street::_internal_has_city() const {
  return this != internal_default_instance() && _impl_.city_ != nullptr;
}
inline bool Street::has_city() const {
  return _internal_has_city();
}
inline const ::City& Street::_internal_city() const {
  const ::City* p = _impl_.city_;
  return p != nullptr ? *p : reinterpret_cast<const ::City&>(
      ::_City_default_instance_);
}
inline const ::City& Street::city() const {
  // @@protoc_insertion_point(field_get:Street.city)
  return _internal_city();
}
inline void Street::unsafe_arena_set_allocated_city(
    ::City* city) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.city_);
  }
  _impl_.city_ = city;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Street.city)
}
inline ::City* Street::release_city() {
  
  ::City* temp = _impl_.city_;
  _impl_.city_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::City* Street::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_release:Street.city)
  
  ::City* temp = _impl_.city_;
  _impl_.city_ = nullptr;
  return temp;
}
inline ::City* Street::_internal_mutable_city() {
  
  if (_impl_.city_ == nullptr) {
    auto* p = CreateMaybeMessage<::City>(GetArenaForAllocation());
    _impl_.city_ = p;
  }
  return _impl_.city_;
}
inline ::City* Street::mutable_city() {
  ::City* _msg = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:Street.city)
  return _msg;
}
inline void Street::set_allocated_city(::City* city) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.city_);
  }
  if (city) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(city));
    if (message_arena != submessage_arena) {
      city = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, city, submessage_arena);
    }

  } else {

  }
  _impl_.city_ = city;
  // @@protoc_insertion_point(field_set_allocated:Street.city)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_street_2eproto_2epb_2eh
